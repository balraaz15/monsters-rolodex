{"version":3,"sources":["components/Card/Card.js","components/Card-List/Card-List.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["card","props","className","src","monster","id","alt","key","name","email","cardList","monsters","map","searchBox","type","placeholder","onChange","changeHandler","App","e","setState","searchText","target","value","state","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAkBeA,G,MAdF,SAAAC,GACZ,OACC,yBAAKC,UAAU,kBACd,yBACCC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YACL,wBAAIC,IAAKN,EAAMG,QAAQC,IACrBJ,EAAMG,QAAQI,MAEhB,2BAAIP,EAAMG,QAAQK,UCENC,G,MAVE,SAAAT,GAChB,OACC,yBAAKC,UAAU,aACbD,EAAMU,SAASC,KAAI,SAAAR,GAAO,OAC1B,kBAAC,EAAD,CAAMG,IAAKH,EAAQC,GAAID,QAASA,UCMrBS,G,MAXG,SAAAZ,GACjB,OACC,2BACCC,UAAU,SACVY,KAAK,SACLC,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,kBCmCJC,G,kBArCb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAcRgB,cAAgB,SAAAE,GACd,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAY,IALG,E,iFASE,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GAAO,OAAI,EAAKgB,SAAS,CAAET,SAAUP,S,+BAOrC,IAAD,EAC0ByB,KAAKL,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,WACZS,EAAmBnB,EAASoB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQI,KAAKwB,cAAcC,SAASZ,EAAWW,kBAEjD,OACE,yBAAK9B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,YAAY,kBACZE,cAAeY,KAAKZ,gBAEtB,kBAAC,EAAD,CAAUN,SAAUmB,S,GAhCVI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.58105b81.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css'\n\nconst card = props => {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<img\n\t\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`}\n\t\t\t\talt=\"Monster\" />\n\t\t\t<h2 key={props.monster.id}>\n\t\t\t\t{props.monster.name}\n\t\t\t</h2>\n\t\t\t<p>{props.monster.email}</p>\n\t\t</div>\n\t)\n};\n\nexport default card;\n","import React from 'react';\nimport Card from '../Card/Card';\n\nimport './Card-List.css';\n\nconst cardList = props => {\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{props.monsters.map(monster => (\n\t\t\t\t<Card key={monster.id} monster={monster} />\n\t\t\t))}\n\t\t</div>\n\t)\n};\n\nexport default cardList;\n","import React from 'react';\n\nimport './SearchBox.css';\n\nconst searchBox = props => {\n\treturn (\n\t\t<input\n\t\t\tclassName=\"search\"\n\t\t\ttype=\"search\"\n\t\t\tplaceholder={props.placeholder}\n\t\t\tonChange={props.changeHandler}\n\t\t/>\n\t)\n}\n\nexport default searchBox;\n","import React, { Component } from 'react';\n\nimport CardList from './components/Card-List/Card-List';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchText: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(monster => this.setState({ monsters: monster }));\n  }\n\n  changeHandler = e => {\n    this.setState({ searchText: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchText } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          changeHandler={this.changeHandler}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}